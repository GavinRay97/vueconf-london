CREATE FUNCTION public.set_current_timestamp_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  _new record;
BEGIN
  _new := NEW;
  _new."updated_at" = NOW();
  RETURN _new;
END;
$$;

CREATE TABLE public."user" (
    id         int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamptz DEFAULT now() NOT NULL,
    updated_at timestamptz DEFAULT now() NOT NULL,
    email      text NOT NULL UNIQUE,
    password   text NOT NULL
);

CREATE TABLE public.meetup (
    id          int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at  timestamptz DEFAULT now() NOT NULL,
    updated_at  timestamptz DEFAULT now() NOT NULL,
    location    text NOT NULL,
    description text NOT NULL,
    name        text NOT NULL,
    image_url   text NOT NULL,
    datetime    timestamptz NOT NULL
);

CREATE TABLE public.meetup_comment (
    id        int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id   int NOT NULL REFERENCES "user" (id),
    meetup_id int NOT NULL REFERENCES meetup (id),
    text      text NOT NULL,
    -- Users shouldn't make duplicate comments on a meetup
    UNIQUE (user_id, meetup_id, text)
);

CREATE TABLE public.meetup_user (
    user_id   int NOT NULL REFERENCES "user" (id),
    meetup_id int NOT NULL REFERENCES meetup (id),
    PRIMARY KEY (user_id, meetup_id)
);

CREATE TRIGGER set_public_meetup_updated_at BEFORE UPDATE ON public.meetup FOR EACH ROW EXECUTE FUNCTION public.set_current_timestamp_updated_at();
COMMENT ON TRIGGER set_public_meetup_updated_at ON public.meetup IS 'trigger to set value of column "updated_at" to current timestamp on row update';

CREATE TRIGGER set_public_user_updated_at BEFORE UPDATE ON public."user" FOR EACH ROW EXECUTE FUNCTION public.set_current_timestamp_updated_at();
COMMENT ON TRIGGER set_public_user_updated_at ON public."user" IS 'trigger to set value of column "updated_at" to current timestamp on row update';